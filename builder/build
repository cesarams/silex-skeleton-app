#!/usr/bin/env php

<?php

require_once __DIR__.'/../vendor/autoload.php';
require_once 'Bob/ControllerBuilder.php';
require_once 'Bob/ControllerCoreBuilder.php';
require_once 'Bob/RepositoryCoreBuilder.php';
require_once 'Bob/RepositoryBuilder.php';
require_once 'Bob/DbBuilder.php';
require_once 'Bob/TravisBuilder.php';
require_once 'Bob/AppControllerBuilder.php';
require_once 'Bob/AppBootstrapBuilder.php';

use Symfony\Component\ClassLoader\UniversalClassLoader;
use \Bob\ControllerBuilder;
use \Bob\ControllerCoreBuilder;
use \Bob\RepositoryCoreBuilder;
use \Bob\RepositoryBuilder;
use \Bob\DbBuilder;
use \Bob\TravisBuilder;
use \Bob\AppControllerBuilder;
use \Bob\AppBootstrapBuilder;

$loader = new UniversalClassLoader();

$command = $argv[1];
$rawArguments = $argv;
$throwAway = array_shift($rawArguments);
$throwAway = array_shift($rawArguments);
$entityList = $rawArguments;
print_r($entityList);

$config = array(
    'phpVersion' => "5.3.21",
    'category' => 'Api_Rest_Implementation',
    'organisation' => 'Thinkadoo',
    'author' => 'Andre Venter',
    'authorEmail' => 'andre.n.venter@gmail.com',
    'corganisationWebSite' => 'http://think-a-doo.net',
    'repository' => 'https://github.com/thinkadoo/silex-skeleton-rest.git'
    );

switch ($command) {

    case "bundle":
        makeAppControllerFile($entityList);
        makeAppBootstrapFile($entityList);
        makeDbFile($entityList);
        makeTravisFile($entityList);
        makeControllers($entityList, $config);
        makeCoreControllers($entityList, $config);
        makeCoreRepositories($entityList, $config);
        makeRepositories($entityList, $config);
        break;

    case "core":
        makeDbFile($entityList);
        makeTravisFile($entityList);
        makeCoreControllers($entityList, $config);
        makeCoreRepositories($entityList, $config);
        break;

    case "controller":
        makeDbFile($entityList);
        makeTravisFile($entityList);
        makeControllers($entityList, $config);
        makeCoreControllers($entityList, $config);
        break;

    case "repository":
        makeDbFile($entityList);
        makeTravisFile($entityList);
        makeCoreRepositories($entityList, $config);
        makeRepositories($entityList, $config);
        break;

    case "corecontroller":
        makeDbFile($entityList);
        makeTravisFile($entityList);
        makeCoreControllers($entityList, $config);
        break;

    case "corerepository":
        makeDbFile($entityList);
        makeTravisFile($entityList);
        makeCoreRepositories($entityList, $config);
        break;

}

    function makeCoreControllers($entityList, $config)
    {
        foreach($entityList as $className)
        {
            $bobCoreController = new ControllerCoreBuilder($entityList, $config, $className);
        }
    }

    function makeControllers($entityList, $config)
    {
        foreach($entityList as $className)
        {
            $bobController = new ControllerBuilder($entityList, $config, $className);
        }
    }

    function makeCoreRepositories($entityList, $config)
    {
        foreach($entityList as $className)
        {
            $bobCoreRepository = new RepositoryCoreBuilder($entityList, $config, $className);
        }
    }

    function makeRepositories($entityList, $config)
    {
        foreach($entityList as $className)
        {
            $bobCoreRepository = new RepositoryBuilder($entityList, $config, $className);
        }
    }

    function makeDbFile($entityList)
    {
        $bobDbFile = new DbBuilder($entityList);
    }

    function makeTravisFile($entityList)
    {
        $bobTravisFile = new TravisBuilder($entityList);
    }

    function makeAppControllerFile($entityList)
    {
        $bobAppControllerFile = new AppControllerBuilder($entityList);
    }

    function makeAppBootstrapFile($entityList)
    {
        $bobAppBootstrapFile = new AppBootstrapBuilder($entityList);
    }