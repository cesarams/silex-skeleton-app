#!/usr/bin/env php

<?php

require_once __DIR__.'/../vendor/autoload.php';
require_once 'Bob/ControllerBuilder.php';
require_once 'Bob/ControllerCoreBuilder.php';
require_once 'Bob/RepositoryCoreBuilder.php';
require_once 'Bob/RepositoryBuilder.php';
require_once 'Bob/DbBuilder.php';
require_once 'Bob/TravisBuilder.php';
require_once 'Bob/AppControllerBuilder.php';
require_once 'Bob/AppBootstrapBuilder.php';

use Symfony\Component\ClassLoader\UniversalClassLoader;
use TwigGenerator\Builder\Generator;
use \Bob\ControllerBuilder;
use \Bob\ControllerCoreBuilder;
use \Bob\RepositoryCoreBuilder;
use \Bob\RepositoryBuilder;
use \Bob\DbBuilder;
use \Bob\TravisBuilder;
use \Bob\AppControllerBuilder;
use \Bob\AppBootstrapBuilder;

$loader = new UniversalClassLoader();

$command = $argv[1];
$rawArguments = $argv;
$throwAway = array_shift($rawArguments);
$throwAway = array_shift($rawArguments);
$entityList = $rawArguments;
print_r($entityList);

$config = array(
    'phpVersion' => "5.3.21",
    'category' => 'Api_Rest_Implementation',
    'organisation' => 'Thinkadoo',
    'author' => 'Andre Venter',
    'authorEmail' => 'andre.n.venter@gmail.com',
    'corganisationWebSite' => 'http://think-a-doo.net',
    'repository' => 'https://github.com/thinkadoo/silex-skeleton-rest.git'
    );

switch ($command) {

    case "bundle":
        makeAppControllerFile($entityList);
        makeAppBootstrapFile($entityList);
        makeDbFile($entityList);
        makeTravisFile($entityList);
        makeControllers($entityList, $config);
        makeCoreControllers($entityList, $config);
        makeCoreRepositories($entityList, $config);
        makeRepositories($entityList, $config);
        break;

    case "core":
        makeDbFile($entityList);
        makeTravisFile($entityList);
        makeCoreControllers($entityList, $config);
        makeCoreRepositories($entityList, $config);
        break;

    case "controller":
        makeDbFile($entityList);
        makeTravisFile($entityList);
        makeControllers($entityList, $config);
        makeCoreControllers($entityList, $config);
        break;

    case "repository":
        makeDbFile($entityList);
        makeTravisFile($entityList);
        makeCoreRepositories($entityList, $config);
        makeRepositories($entityList, $config);
        break;

    case "corecontroller":
        makeDbFile($entityList);
        makeTravisFile($entityList);
        makeCoreControllers($entityList, $config);
        break;

    case "corerepository":
        makeDbFile($entityList);
        makeTravisFile($entityList);
        makeCoreRepositories($entityList, $config);
        break;

}

    function makeCoreControllers($entityList, $config)
    {

        $phpVersion = $config['phpVersion'];
        $category = $config['category'];
        $organisation = $config['organisation'];
        $author = $config['author'];
        $authorEmail = $config['authorEmail'];
        $corganisationWebSite = $config['corganisationWebSite'];
        $repository = $config['repository'];

        // ControllerCore

        foreach($entityList as $className)
        {
            $nameSpace = $className. '\\' . $className . 'Bundle\\Core';
            $moduleName = $className;

            $bobCoreController = new ControllerCoreBuilder();
            $bobCoreController->setOutputName('ControllerCore.php');

            $bobCoreController->setVariable('phpVersion', $phpVersion);
            $bobCoreController->setVariable('category', $category);
            $bobCoreController->setVariable('author', $author);
            $bobCoreController->setVariable('organisation', $organisation);
            $bobCoreController->setVariable('organisationWebSite', $corganisationWebSite);
            $bobCoreController->setVariable('repository', $repository);

            $bobCoreController->setVariable('className', $className);
            $bobCoreController->setVariable('implements', 'ControllerProviderInterface');
            $bobCoreController->setVariable('moduleName', $moduleName);
            $bobCoreController->setVariable('author', $author);
            $bobCoreController->setVariable('authorEmail', $authorEmail);

            $generateCoreController = new Generator();
            $generateCoreController->setTemplateDirs(array(__DIR__.'/Bob/Work/ControllerCoreTemplate/',));
            $generateCoreController->setMustOverwriteIfExists(true);
            $generateCoreController->setVariables(array('namespace' => $nameSpace,));

            $generateCoreController->addBuilder($bobCoreController);

            $generateCoreController->writeOnDisk(__DIR__.'/../src/'.$className.'/'.$className.'Bundle/Core');
            print_r('Done Generating Controller Core '.$className.' ;) ');

        }
    }

    function makeControllers($entityList, $config){

        $phpVersion = $config['phpVersion'];
        $category = $config['category'];
        $organisation = $config['organisation'];
        $author = $config['author'];
        $authorEmail = $config['authorEmail'];
        $corganisationWebSite = $config['corganisationWebSite'];
        $repository = $config['repository'];

        // Controller

        foreach($entityList as $className){

            $nameSpace = $className. '\\' . $className . 'Bundle\\Controller';
            $moduleName = $className;

            $bobController = new ControllerBuilder();
            $bobController->setOutputName($className.'Controller.php');

            $bobController->setVariable('phpVersion', $phpVersion);
            $bobController->setVariable('category', $category);
            $bobController->setVariable('author', $author);
            $bobController->setVariable('organisation', $organisation);
            $bobController->setVariable('organisationWebSite', $corganisationWebSite);
            $bobController->setVariable('repository', $repository);

            $bobController->setVariable('className', $className);
            $bobController->setVariable('extends', 'ControllerCore');
            $bobController->setVariable('moduleName', $moduleName);
            $bobController->setVariable('author', $author);
            $bobController->setVariable('authorEmail', $authorEmail);

            $generateController = new Generator();
            $generateController->setTemplateDirs(array(__DIR__.'/Bob/Work/ControllerTemplate/',));
            $generateController->setMustOverwriteIfExists(true);
            $generateController->setVariables(array('namespace' => $nameSpace,));

            $generateController->addBuilder($bobController);

            $generateController->writeOnDisk(__DIR__.'/../src/'.$className.'/'.$className.'Bundle/Controller');
            print_r('Done Generating Controller '.$className.' ;) ');

        }
    }

    function makeCoreRepositories($entityList, $config)
    {
        $phpVersion = $config['phpVersion'];
        $category = $config['category'];
        $organisation = $config['organisation'];
        $author = $config['author'];
        $authorEmail = $config['authorEmail'];
        $corganisationWebSite = $config['corganisationWebSite'];
        $repository = $config['repository'];

        // RepositoryCore

        foreach($entityList as $className){

            $nameSpace = $className. '\\' . $className . 'Bundle\\Core';
            $moduleName = $className;

            $bobCoreRepository = new RepositoryCoreBuilder();
            $bobCoreRepository->setOutputName('RepositoryCore.php');

            $bobCoreRepository->setVariable('phpVersion', $phpVersion);
            $bobCoreRepository->setVariable('category', $category);
            $bobCoreRepository->setVariable('author', $author);
            $bobCoreRepository->setVariable('organisation', $organisation);
            $bobCoreRepository->setVariable('organisationWebSite', $corganisationWebSite);
            $bobCoreRepository->setVariable('repository', $repository);

            $bobCoreRepository->setVariable('className', $className);
            $bobCoreRepository->setVariable('moduleName', $moduleName);
            $bobCoreRepository->setVariable('author', $author);
            $bobCoreRepository->setVariable('authorEmail', $authorEmail);

            $generateCoreRepository = new Generator();
            $generateCoreRepository->setTemplateDirs(array(__DIR__.'/Bob/Work/RepositoryCoreTemplate/',));
            $generateCoreRepository->setMustOverwriteIfExists(true);
            $generateCoreRepository->setVariables(array('namespace' => $nameSpace,));

            $generateCoreRepository->addBuilder($bobCoreRepository);

            $generateCoreRepository->writeOnDisk(__DIR__.'/../src/'.$className.'/'.$className.'Bundle/Core');
            print_r('Done Generating Repository Core '.$className.' ;) ');

        }
    }

    function makeRepositories($entityList, $config)
    {
        $phpVersion = $config['phpVersion'];
        $category = $config['category'];
        $organisation = $config['organisation'];
        $author = $config['author'];
        $authorEmail = $config['authorEmail'];
        $corganisationWebSite = $config['corganisationWebSite'];
        $repository = $config['repository'];

        // Repository

        foreach($entityList as $className){

            $nameSpace = $className. '\\' . $className . 'Bundle\\Repository';
            $moduleName = $className;

            $bobCoreRepository = new RepositoryBuilder();
            $bobCoreRepository->setOutputName($className.'Repository.php');

            $bobCoreRepository->setVariable('phpVersion', $phpVersion);
            $bobCoreRepository->setVariable('category', $category);
            $bobCoreRepository->setVariable('author', $author);
            $bobCoreRepository->setVariable('organisation', $organisation);
            $bobCoreRepository->setVariable('organisationWebSite', $corganisationWebSite);
            $bobCoreRepository->setVariable('repository', $repository);

            $bobCoreRepository->setVariable('className', $className);
            $bobCoreRepository->setVariable('extends', 'RepositoryCore');
            $bobCoreRepository->setVariable('moduleName', $moduleName);
            $bobCoreRepository->setVariable('author', $author);
            $bobCoreRepository->setVariable('authorEmail', $authorEmail);

            $generateCoreRepository = new Generator();
            $generateCoreRepository->setTemplateDirs(array(__DIR__.'/Bob/Work/RepositoryTemplate/',));
            $generateCoreRepository->setMustOverwriteIfExists(true);
            $generateCoreRepository->setVariables(array('namespace' => $nameSpace,));

            $generateCoreRepository->addBuilder($bobCoreRepository);

            $generateCoreRepository->writeOnDisk(__DIR__.'/../src/'.$className.'/'.$className.'Bundle/Repository');
            print_r('Done Generating Repository '.$className.' ;) ');

        }
    }

    function makeDbFile($entityList)
    {
        $bobDbFile = new DbBuilder();
        $bobDbFile->setOutputName('db.sql');
        $bobDbFile->setVariable('items', array_combine($entityList, $entityList));

        $generateDb = new Generator();
        $generateDb->setTemplateDirs(array(__DIR__.'/Bob/Work/DbTemplate/',));
        $generateDb->setMustOverwriteIfExists(true);

        $generateDb->addBuilder($bobDbFile);

        $generateDb->writeOnDisk(__DIR__.'/../db/');
        print_r('Done Generating Database ;) ');

    }

        function makeTravisFile($entityList)
    {
        $bobTravisFile = new TravisBuilder();
        $bobTravisFile->setOutputName('.travis.yml');
        $bobTravisFile->setVariable('items', array_combine($entityList, $entityList));

        $generateTravis = new Generator();
        $generateTravis->setTemplateDirs(array(__DIR__.'/Bob/Work/TravisTemplate/',));
        $generateTravis->setMustOverwriteIfExists(true);

        $generateTravis->addBuilder($bobTravisFile);

        $generateTravis->writeOnDisk(__DIR__.'/../');
        print_r('Done Generating Travis File ;) ');

    }


    function makeAppControllerFile($entityList)
    {
        $bobAppControllerFile = new AppControllerBuilder();
        $bobAppControllerFile->setOutputName('controller.php');
        $bobAppControllerFile->setVariable('items', array_combine($entityList, $entityList));

        $generateAppController = new Generator();
        $generateAppController->setTemplateDirs(array(__DIR__.'/Bob/Work/AppControllerBuilder/',));
        $generateAppController->setMustOverwriteIfExists(true);

        $generateAppController->addBuilder($bobAppControllerFile);

        $generateAppController->writeOnDisk(__DIR__.'/../app/');
        print_r('Done Generating App Controller File ;) ');

    }

    function makeAppBootstrapFile($entityList)
    {
        $bobAppBootstrapFile = new AppBootstrapBuilder();
        $bobAppBootstrapFile->setOutputName('bootstrap.php');
        $bobAppBootstrapFile->setVariable('items', array_combine($entityList, $entityList));

        $generateAppBootstrap = new Generator();
        $generateAppBootstrap->setTemplateDirs(array(__DIR__.'/Bob/Work/AppBootstrapBuilder/',));
        $generateAppBootstrap->setMustOverwriteIfExists(true);

        $generateAppBootstrap->addBuilder($bobAppBootstrapFile);

        $generateAppBootstrap->writeOnDisk(__DIR__.'/../app/');
        print_r('Done Generating App Bootstrap File ;) ');

    }