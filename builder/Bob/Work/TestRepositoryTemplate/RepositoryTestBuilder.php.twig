{% extends "base/common.php.twig" %}

{% block functions %}

    /**
     * @var null
     */
    static private $pdo = null;
    /**
     * @var object
     */
    private $conn;
    /**
     * @var mixed
     */
    private $db;
    /**
     * @var \{{ className }}\{{ className }}Bundle\Repository\{{ className }}Repository
     */
    private ${{ tableName }}Repository;

    /**
     * constructor
     *
     */
    public function __construct()
    {
        $this->db = include __DIR__ . "/../../db.php";
        $this->{{ tableName }}Repository = new {{ className }}Repository($this->db);
    }

    /**
     * getConnection
     *
     * @return \PHPUnit_Extensions_Database_DB_DefaultDatabaseConnection
     */
    public function getConnection()
    {
        if ($this->conn === null) {
            if (self::$pdo == null) {
                self::$pdo = new \PDO($GLOBALS['DB_DSN'], $GLOBALS['DB_USER'], $GLOBALS['DB_PASSWD']);
            }
            $this->conn = $this->createDefaultDBConnection(self::$pdo, $GLOBALS['DB_DBNAME']);
        }

        return $this->conn;
    }

    /**
     * getDataSet
     *
     * @return \PHPUnit_Extensions_Database_DataSet_IDataSet|\PHPUnit_Extensions_Database_DataSet_YamlDataSet
     */
    public function getDataSet()
    {
        self::$pdo->exec("set foreign_key_checks=0");

        return new \PHPUnit_Extensions_Database_DataSet_YamlDataSet(
            __DIR__ . "/../../DataSet/{{ className }}/seed{{ className }}.yml"
        );
    }

    /**
     * testConstruct{{ className }}RepositoryClass
     *
     * @return void
     */
    public function testConstruct{{ className }}RepositoryClass()
    {
        $this->{{ tableName }}Repository = new {{ className }}Repository($this->db);
    }

    /**
     * testFindAll
     *
     * @return void
     */
    public function testFindAll()
    {
        $expected = $this->getConnection()->getRowCount('{{ tableName }}');
        $actual = count($this->{{ tableName }}Repository->findAll());

        $this->assertEquals($expected, $actual);
    }

    /**
     * testFindinputId1outputNameDownloadSilexSkeletonRest
     *
     * @return void
     */
    public function testFindInputId1OutputNameDownloadSilexSkeletonRest()
    {
        $inputId = 1;
        $whatIsThere = $this->{{ tableName }}Repository->find($inputId);

        if ($whatIsThere[{% for key,value in properties %}{% if loop.first %}'{{ key }}'{% endif %}{% endfor %}] == '0'){
            $expected = '0';
        }else{
            $expected = 'test_'.{% for key,value in properties %}{% if loop.first %}'{{ key }}'{% endif %}{% endfor %}.'_string';
        }

        ${{ className }} = $this->{{ tableName }}Repository->find($inputId);
        $actual = ${{ className }}[{% for key,value in properties %}{% if loop.first %}'{{ key }}'{% endif %}{% endfor %}];

        $this->assertEquals($expected, $actual);
    }

    /**
     * testFindinputId10outputNull
     *
     * @return void
     */
    public function testFindInputId10OutputNull()
    {
        $inputId = 10;

        $expected = null;
        $actual = $this->{{ tableName }}Repository->find($inputId);

        $this->assertEquals($expected, $actual);
    }

    /**
     * testDeleteinputId1
     *
     * @return void
     */
    public function testDeleteInputId1()
    {
        $inputId = 1;

        $this->{{ tableName }}Repository->delete($inputId);
        $expected = null;
        $actual = $this->{{ tableName }}Repository->find($inputId);

        $this->assertEquals($expected, $actual);
    }

    /**
     * testDeleteinputId10
     *
     * @return void
     */
    public function testDeleteInputId10()
    {
        $inputId = 10;

        $expected = 0;
        $actual = $this->{{ tableName }}Repository->delete($inputId);

        $this->assertEquals($expected, $actual);
    }

    /**
     * testUpdateinputId2NameNew{{ className }}
     *
     * @return void
     */
    public function testUpdateInputId2NameNewUser()
    {
        $inputId = 2;
        $whatIsThere = $this->{{ tableName }}Repository->find($inputId);

        if ($whatIsThere['name'] == '0'){
            $inputParams = array({% for key,value in properties %}{% if loop.first %}'{{ key }}'{% endif %}{% endfor %} => 1);
        }else{
            $inputParams = array({% for key,value in properties %}{% if loop.first %}'{{ key }}'{% endif %}{% endfor %} => 'New {{ className }}');
        }

        $this->{{ tableName }}Repository->update($inputId, $inputParams);
        ${{ className }}Repository = $this->{{ tableName }}Repository->find($inputId);

        if ($whatIsThere[{% for key,value in properties %}{% if loop.first %}'{{ key }}'{% endif %}{% endfor %}] == '0'){
            $expected = '1';
        }else{
            $expected = 'New {{ className }}';
        }

        $actual = ${{ className }}Repository[{% for key,value in properties %}{% if loop.first %}'{{ key }}'{% endif %}{% endfor %}];
        $this->assertEquals($expected, $actual);
    }

    /**
     * testInsertinputNameNew{{ className }}
     *
     * @return void
     */
    public function testInsertInputNameNew{{ className }}()
    {
        $inputId = 2;
        $whatIsThere = $this->{{ tableName }}Repository->find($inputId);

        if ($whatIsThere[{% for key,value in properties %}{% if loop.first %}'{{ key }}'{% endif %}{% endfor %}] == '0'){
            $inputParams = array({% for key,value in properties %}{% if loop.first %}'{{ key }}'{% endif %}{% endfor %} => 1);
        }else{
            $inputParams = array({% for key,value in properties %}{% if loop.first %}'{{ key }}'{% endif %}{% endfor %} => 'New {{ className }}');
        }

        $this->{{ tableName }}Repository->insert($inputParams);
        $lastInsertId = $this->db->lastInsertId();
        ${{ className }}Repository = $this->{{ tableName }}Repository->find($lastInsertId);

        if ($whatIsThere[{% for key,value in properties %}{% if loop.first %}'{{ key }}'{% endif %}{% endfor %}] == '0'){
            $expected = '1';
        }else{
            $expected = 'New {{ className }}';
        }

        $actual = ${{ className }}Repository[{% for key,value in properties %}{% if loop.first %}'{{ key }}'{% endif %}{% endfor %}];

        $this->assertEquals($expected, $actual);
    }
{% endblock %}