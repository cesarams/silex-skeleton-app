#!/usr/bin/env php

<?php

require_once __DIR__.'/../vendor/autoload.php';
require_once 'Bob/ControllerTestBuilder.php';
require_once 'Bob/ControllerCoreTestBuilder.php';
require_once 'Bob/RepositoryCoreTestBuilder.php';
require_once 'Bob/RepositoryTestBuilder.php';
require_once 'Bob/DbBuilder.php';
require_once 'Bob/SeedBuilder.php';

use Symfony\Component\ClassLoader\UniversalClassLoader;
use TwigGenerator\Builder\Generator;
use \Bob\ControllerTestBuilder;
use \Bob\ControllerCoreTestBuilder;
use \Bob\RepositoryCoreTestBuilder;
use \Bob\RepositoryTestBuilder;
use \Bob\DbBuilder;
use \Bob\SeedBuilder;

$loader = new UniversalClassLoader();

$command = $argv[1];
$rawArguments = $argv;
$throwAway = array_shift($rawArguments);
$throwAway = array_shift($rawArguments);
$entityList = $rawArguments;
print_r($entityList);

$config = array(
    'phpVersion' => "5.3.21",
    'category' => 'Api_Rest_Implementation_Tests',
    'organisation' => 'Thinkadoo',
    'author' => 'Andre Venter',
    'authorEmail' => 'andre.n.venter@gmail.com',
    'corganisationWebSite' => 'http://think-a-doo.net',
    'repository' => 'https://github.com/thinkadoo/silex-skeleton-rest.git'
    );

switch ($command) {


    case "testbundle":
        makeTests($entityList, $config);
        break;

    case "testcontroller":
        makeTests($entityList, $config);
        break;

}



    function makeTests($entityList, $config)
    {
        makeSupportFilesForTests($entityList, $config);
        makeControllerTest($entityList, $config);
    }

    function testController($entityList, $config)
    {
        makeSupportFilesForTests($entityList, $config);
        makeControllerTest($entityList, $config);
    }

    function makeControllerTest($entityList, $config)
    {
        $phpVersion = $config['phpVersion'];
        $category = $config['category'];
        $organisation = $config['organisation'];
        $author = $config['author'];
        $authorEmail = $config['authorEmail'];
        $corganisationWebSite = $config['corganisationWebSite'];
        $repository = $config['repository'];

        foreach($entityList as $className)
        {
            $nameSpace = $className. '\\Tests\\' . $className . 'Bundle\\Controller';
            $moduleName = $className;

            $bobControllerTestFile = new ControllerTestBuilder();
            $bobControllerTestFile->setOutputName($className.'ControllerTest.php');

            $bobControllerTestFile->setVariable('phpVersion', $phpVersion);
            $bobControllerTestFile->setVariable('category', $category);
            $bobControllerTestFile->setVariable('author', $author);
            $bobControllerTestFile->setVariable('organisation', $organisation);
            $bobControllerTestFile->setVariable('organisationWebSite', $corganisationWebSite);
            $bobControllerTestFile->setVariable('repository', $repository);

            $bobControllerTestFile->setVariable('className', $className);
            $bobControllerTestFile->setVariable('extends', 'WebTestCase');
            $bobControllerTestFile->setVariable('moduleName', $moduleName);
            $bobControllerTestFile->setVariable('author', $author);
            $bobControllerTestFile->setVariable('authorEmail', $authorEmail);

            $generateControllerTestFile = new Generator();
            $generateControllerTestFile->setTemplateDirs(array(__DIR__.'/Bob/Work/ControllerTemplate/',));
            $generateControllerTestFile->setMustOverwriteIfExists(true);
            $generateControllerTestFile->setVariables(array('namespace' => $nameSpace,));

            $generateControllerTestFile->addBuilder($bobControllerTestFile);
            $generateControllerTestFile->writeOnDisk(__DIR__.'/../tests/'.$className.'/Tests/'.$className.'Bundle/Controller/');
            print_r('Done Generating Test file '.$className.'ControllerTest ;) ');

        }
    };

    function makeSupportFilesForTests($entityList, $config)
    {
        $phpVersion = $config['phpVersion'];
        $category = $config['category'];
        $organisation = $config['organisation'];
        $author = $config['author'];
        $authorEmail = $config['authorEmail'];
        $corganisationWebSite = $config['corganisationWebSite'];
        $repository = $config['repository'];

        // seed.yml

        foreach($entityList as $className)
        {
            $bobSeedFile = new SeedBuilder();
            $bobSeedFile->setOutputName('seed'.$className.'.yml');

            $generateYmlFile = new Generator();
            $generateYmlFile->setTemplateDirs(array(__DIR__.'/Bob/Work/DataSetTemplate/',));
            $generateYmlFile->setMustOverwriteIfExists(true);

            $generateYmlFile->addBuilder($bobSeedFile);
            $generateYmlFile->writeOnDisk(__DIR__.'/../tests/'.$className.'/Tests/DataSet/'.$className.'/');
            print_r('Done Generating YML Seed Data file '.$className.' ;) ');

        }

        foreach($entityList as $className)
        {
            $moduleName = $className;

            $bobDBFile = new DbBuilder();
            $bobDBFile->setOutputName('db.php');

            $bobDBFile->setVariable('phpVersion', $phpVersion);
            $bobDBFile->setVariable('category', $category);
            $bobDBFile->setVariable('author', $author);
            $bobDBFile->setVariable('organisation', $organisation);
            $bobDBFile->setVariable('organisationWebSite', $corganisationWebSite);
            $bobDBFile->setVariable('repository', $repository);

            $bobDBFile->setVariable('className', $className);
            $bobDBFile->setVariable('moduleName', $moduleName);
            $bobDBFile->setVariable('author', $author);
            $bobDBFile->setVariable('authorEmail', $authorEmail);

            $generateDbFile = new Generator();
            $generateDbFile->setTemplateDirs(array(__DIR__.'/Bob/Work/DbClassTemplate/',));
            $generateDbFile->setMustOverwriteIfExists(true);

            $generateDbFile->addBuilder($bobDBFile);
            $generateDbFile->writeOnDisk(__DIR__.'/../tests/'.$className.'/Tests/');
            print_r('Done Generating db.php file '.$className.' ;) ');

        }

    }
