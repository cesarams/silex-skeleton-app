#!/usr/bin/env php

<?php

require_once __DIR__.'/../vendor/autoload.php';
require_once 'Bob/ControllerTestBuilder.php';
require_once 'Bob/ControllerCoreTestBuilder.php';
require_once 'Bob/RepositoryCoreTestBuilder.php';
require_once 'Bob/RepositoryTestBuilder.php';
require_once 'Bob/DbBuilder.php';
require_once 'Bob/SeedBuilder.php';
require_once 'Bob/TestsBootstrapBuilder.php';

use Symfony\Component\ClassLoader\UniversalClassLoader;
use TwigGenerator\Builder\Generator;
use \Bob\ControllerTestBuilder;
use \Bob\ControllerCoreTestBuilder;
use \Bob\RepositoryCoreTestBuilder;
use \Bob\RepositoryTestBuilder;
use \Bob\DbBuilder;
use \Bob\SeedBuilder;
use \Bob\TestsBootstrapBuilder;

$loader = new UniversalClassLoader();

$command = $argv[1];
$rawArguments = $argv;
$throwAway = array_shift($rawArguments);
$throwAway = array_shift($rawArguments);
$entityList = $rawArguments;
print_r($entityList);

$config = array(
    'phpVersion' => "5.3.21",
    'category' => 'Api_Rest_Implementation_Tests',
    'organisation' => 'Thinkadoo',
    'author' => 'Andre Venter',
    'authorEmail' => 'andre.n.venter@gmail.com',
    'corganisationWebSite' => 'http://think-a-doo.net',
    'repository' => 'https://github.com/thinkadoo/silex-skeleton-rest.git'
    );

switch ($command) {


    case "testbundle":
        makeTests($entityList, $config);
        break;

    case "testcore":
        makeCoreTests($entityList, $config);
        break;

    case "testcontroller":
        testController($entityList, $config);
        break;

    case "testrepository":
        testRepository($entityList, $config);
        break;

    case "testrepositorycore":
        testRepository($entityList, $config);
        break;

    case "testcontrollercore":
        testController($entityList, $config);
        break;

}


    function makeTests($entityList, $config)
    {
        makeTestsBootstrapFile($entityList);
        makeSupportFilesForTests($entityList, $config);
        makeControllerTest($entityList, $config);
        makeRepositoryTest($entityList, $config);
        makeRepositoryCoreTest($entityList, $config);
        makeControllerCoreTest($entityList, $config);
    }

    function makeCoreTests($entityList, $config)
    {
        makeSupportFilesForTests($entityList, $config);
        makeRepositoryCoreTest($entityList, $config);
        makeControllerCoreTest($entityList, $config);
    }

    function testController($entityList, $config)
    {
        makeSupportFilesForTests($entityList, $config);
        makeControllerTest($entityList, $config);
    }

    function testRepository($entityList, $config)
    {
        makeSupportFilesForTests($entityList, $config);
        makeRepositoryTest($entityList, $config);
        makeRepositoryCoreTest($entityList, $config);
    }

    function testRepositoryCore($entityList, $config)
    {
        makeSupportFilesForTests($entityList, $config);
        makeRepositoryCoreTest($entityList, $config);
    }

    function testControllerCore($entityList, $config)
    {
        makeSupportFilesForTests($entityList, $config);
        makeControllerCoreTest($entityList, $config);
    }

    function makeControllerTest($entityList, $config)
    {
        foreach($entityList as $className)
        {
            $bobControllerTestFile = new ControllerTestBuilder($entityList, $config, $className);
        }
    };

    function makeControllerCoreTest($entityList, $config)
    {
        foreach($entityList as $className)
        {
            $bobControllerCoreTestFile = new ControllerCoreTestBuilder($entityList, $config, $className);
        }
    };

    function makeRepositoryTest($entityList, $config)
    {
        foreach($entityList as $className)
        {
            $bobRepositoryCoreTestFile = new RepositoryCoreTestBuilder($entityList, $config, $className);
        }
    };

    function makeRepositoryCoreTest($entityList, $config)
    {
        foreach($entityList as $className)
        {
            $bobRepositoryTestFile = new RepositoryTestBuilder($entityList, $config, $className);
        }
    };

    function makeSupportFilesForTests($entityList, $config)
    {
        foreach($entityList as $className)
        {
            $bobSeedFile = new SeedBuilder($entityList, $config, $className);
        }

        foreach($entityList as $className)
        {
            $bobDBFile = new DbBuilder($entityList, $config, $className);
        }
    }


    function makeTestsBootstrapFile($entityList)
    {
        $bobTestsBootstrapFile = new TestsBootstrapBuilder($entityList);
    }
