{% extends "base/common.php.twig" %}

{% block functions %}
    /**
     * @var null
     */
    static private $_pdo = null;
    /**
     * @var object
     */
    private $_conn;
    /**
     * @var mixed
     */
    private $_db;
    /**
     * @var \{{ className }}\{{ className }}Bundle\Repository\{{ className }}Repository
     */
    private $_{{ tableName }}Repository;

    /**
     * constructor
     *
     */
    public function __construct()
    {
        $this->_db = include __DIR__ . "/../../db.php";
        $this->_{{ tableName }}Repository = new {{ className }}Repository($this->_db);
    }

    /**
     * getConnection
     *
     * @return \PHPUnit_Extensions_Database_DB_DefaultDatabaseConnection
     */
    public function getConnection()
    {
        if ($this->_conn === null) {
            if (self::$_pdo == null) {
                self::$_pdo = new \PDO($GLOBALS['DB_DSN'], $GLOBALS['DB_USER'], $GLOBALS['DB_PASSWD']);
            }
            $this->_conn = $this->createDefaultDBConnection(self::$_pdo, $GLOBALS['DB_DBNAME']);
        }

        return $this->_conn;
    }

    /**
     * getDataSet
     *
     * @return \PHPUnit_Extensions_Database_DataSet_IDataSet|\PHPUnit_Extensions_Database_DataSet_YamlDataSet
     */
    public function getDataSet()
    {
        self::$_pdo->exec("set foreign_key_checks=0");

        return new \PHPUnit_Extensions_Database_DataSet_YamlDataSet(
            __DIR__ . "/../../DataSet/{{ className }}/seed{{ className }}.yml"
        );
    }

    /**
     * testConstruct{{ className }}RepositoryClass
     *
     * @return void
     */
    public function testConstruct{{ className }}RepositoryClass()
    {
        $this->_{{ tableName }}Repository = new {{ className }}Repository($this->_db);
    }

    /**
     * testFindAll
     *
     * @return void
     */
    public function testFindAll()
    {
        $expected = $this->getConnection()->getRowCount('{{ tableName }}');
        $actual = count($this->_{{ tableName }}Repository->findAll());

        $this->assertEquals($expected, $actual);
    }

    /**
     * testFind_inputId1_outputNameDownloadSilexSkeletonRest
     *
     * @return void
     */
    public function testFindInputId1OutputNameDownloadSilexSkeletonRest()
    {
        $inputId = 1;

        $expected = 'test_{{ tableName }}_name';
        ${{ className }} = $this->_{{ tableName }}Repository->find($inputId);
        $actual = ${{ className }}['name'];

        $this->assertEquals($expected, $actual);
    }

    /**
     * testFind_inputId10_outputNull
     *
     * @return void
     */
    public function testFindInputId10OutputNull()
    {
        $inputId = 10;

        $expected = null;
        $actual = $this->_{{ tableName }}Repository->find($inputId);

        $this->assertEquals($expected, $actual);
    }

    /**
     * testDelete_inputId1
     *
     * @return void
     */
    public function testDeleteInputId1()
    {
        $inputId = 1;

        $this->_{{ tableName }}Repository->delete($inputId);
        $expected = null;
        $actual = $this->_{{ tableName }}Repository->find($inputId);

        $this->assertEquals($expected, $actual);
    }

    /**
     * testDelete_inputId10
     *
     * @return void
     */
    public function testDeleteInputId10()
    {
        $inputId = 10;

        $expected = 0;
        $actual = $this->_{{ tableName }}Repository->delete($inputId);

        $this->assertEquals($expected, $actual);
    }

    /**
     * testUpdate_inputId2NameNew{{ className }}
     *
     * @return void
     */
    public function testUpdateInputId2NameNew{{ className }}()
    {
        $inputId = 2;
        $inputParams = array('name' => 'New {{ className }}');

        $this->_{{ tableName }}Repository->update($inputId, $inputParams);
        ${{ className }}Repository = $this->_{{ tableName }}Repository->find($inputId);

        $expected = 'New {{ className }}';
        $actual = ${{ className }}Repository['name'];
        $this->assertEquals($expected, $actual);
    }

    /**
     * testInsert_inputNameNew{{ className }}
     *
     * @return void
     */
    public function testInsertInputNameNew{{ className }}()
    {
        $inputParams = array('name' => 'New {{ className }}');
        $this->_{{ tableName }}Repository->insert($inputParams);
        $lastInsertId = $this->_db->lastInsertId();
        ${{ className }}Repository = $this->_{{ tableName }}Repository->find($lastInsertId);

        $expected = 'New {{ className }}';
        $actual = ${{ className }}Repository['name'];

        $this->assertEquals($expected, $actual);
    }
{% endblock %}